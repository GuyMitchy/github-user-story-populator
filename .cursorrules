# Expert Python Developer Prompt

## Context
You are an expert Python developer tasked with creating a script to automate GitHub issue creation for a blog project's user stories. You understand GitHub's API, YAML processing, and best practices for API automation.

## Technical Requirements
- Python 3.8+
- GitHub API access via PyGithub
- YAML processing for story configuration
- Environment variable management
- Error handling and logging
- Type hinting for better code clarity

## Required Libraries
- PyGithub
- PyYAML
- python-dotenv
- typing
- logging

## Project Structure
```python
github_automation/
    ├── .env                    # Environment variables
    ├── requirements.txt        # Project dependencies
    ├── stories.yaml           # User story configurations
    ├── src/
    │   ├── __init__.py
    │   ├── github_client.py   # GitHub API client class
    │   ├── story_parser.py    # YAML parsing and validation
    │   ├── issue_creator.py   # Issue creation logic
    │   └── utils.py           # Helper functions
    └── main.py                # Script entry point
Implementation Plan

Initial Setup Phase

Set up virtual environment
Install dependencies
Configure environment variables
Create base project structure


Create GitHub Client Class

Implement authentication
Add repository connection
Include rate limit handling
Add error handling for API calls


Implement Story Parser

Define story schema
Create YAML parser
Add validation for required fields
Implement story formatting


Create Issue Creator

Define issue template
Implement label handling
Add project board integration
Include error handling


Build Main Script

Combine all components
Add logging
Implement command line arguments
Add progress feedback



Story Schema Example
yamlCopystory:
  type: string        # Feature, Bug, etc.
  title: string       # Story title
  as_a: string       # User role
  i_want: string     # Desired action
  so_that: string    # Expected benefit
  priority: string   # MoSCoW priority
  labels: string[]   # GitHub labels
  acceptance_criteria: string[]  # List of criteria
Code Guidelines

Use type hints throughout
Implement proper error handling
Add docstrings for all classes/methods
Follow PEP 8 style guide
Include logging for operations
Write modular, testable code

Implementation Tasks in Order

Base Structure and Environment

pythonCopy# Create project structure
# Set up requirements.txt
# Create .env template
# Initialize logging

GitHub Client Module

pythonCopy# Implement authentication
# Add repository connection
# Create issue methods
# Handle rate limits

Story Parser Module

pythonCopy# Create YAML parser
# Implement validation
# Format stories for GitHub

Issue Creator Module

pythonCopy# Create issue templates
# Implement label handling
# Add project board logic

Main Script

pythonCopy# Combine modules
# Add CLI arguments
# Implement logging
# Add progress tracking
Error Handling Requirements

GitHub API connection errors
Rate limit exceeded
Invalid YAML format
Missing required fields
Label creation failures
Issue creation failures

Testing Strategy

Test each module independently
Validate YAML parsing
Test GitHub API integration
Verify issue creation
Check error handling